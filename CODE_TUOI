from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from keras import datasets,Sequential,callbacks
from keras.layers import Conv2D, Dense, MaxPooling2D, Flatten

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from keras.layers import Dense,Activation,BatchNormalization,Dropout
from keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from keras import callbacks
from sklearn.metrics import precision_score, recall_score,confusion_matrix,classification_report,accuracy_score,f1_score
from keras.callbacks import EarlyStopping
from tensorflow.keras.optimizers import RMSprop
from matplotlib import scale

from sklearn.metrics import confusion_matrix
from keras.utils import np_utils
from keras.preprocessing.image import load_img, img_to_array,array_to_img,ImageDataGenerator, image
import os

tuoi = ['018','019','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39'
            ,'40'] 

dir_train = '/content/drive/MyDrive/data_tuoi/'  

listpath = []
y_train = []
x_train = []
x_test = []
y_test = []

def create_data(dir, x_train, y_train):
  for i in tuoi:
    path = os.path.join(dir,i)
    index_label = tuoi.index(i)
    for j in os.listdir(path):
      img_path = os.path.join(path, j)
      img = image.load_img(img_path, target_size=(80,80))
      img = img_to_array(img)
      img = img.reshape(80,80,3) 
      img = img.astype('float32')
      img = img/255
      x_train.append(img)
      y_train.append(index_label)
create_data(dir_train, x_train, y_train) 

# xử lí dữ liệu
x_train = np.array(x_train)
y_train = np.array(y_train)
y_train = np_utils.to_categorical(y_train, 100)
print(x_train.shape)
print(y_train.shape)

# Initialising the CNN
model = Sequential()

# Step 1 - Convolution
model.add(Conv2D(32, 3, 3, input_shape = (80, 80, 3), activation = 'relu'))

# Step 2 - Pooling
model.add(MaxPooling2D(pool_size = (2, 2)))

# Adding a second convolutional layer
model.add(Conv2D(32, 3, 3, activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))

# Step 3 - Flattening
model.add(Flatten())

# Step 4 - Full connection
model.add(Dense(128, activation = 'relu'))
model.add(Dense(128, activation = 'relu'))
model.add(Dense(128, activation = 'relu'))
model.add(Dense( 100, activation = 'softmax'))

# Compiling the CNN
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])

history = model.fit(x_train,y_train,epochs=50,verbose = 1)
model.save('tuoi80_72.h5')
